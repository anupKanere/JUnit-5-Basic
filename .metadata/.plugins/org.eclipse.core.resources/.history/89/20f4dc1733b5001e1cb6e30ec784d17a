package com.app.ak;

import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.fail;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

@TestInstance(TestInstance.Lifecycle.PER_METHOD)
class MathUtilsTest {
	
	MathUtils math;
	
	@BeforeAll
	static void beforeAll() {
		System.out.println("This is running before creating instace of MathUtilsTest class");
	}

	@BeforeEach
	void init() {
		math = new MathUtils();
	}
	
	@AfterEach  
	void cleanUp() {
		System.out.println("Performing Clean-Up....");
	}

	@Test
	@DisplayName("Testing add method")
	void test() {
		int expected = 2;
		int actual = math.add(1, 1);
		assertEquals(expected, actual, "Add method should  add two numbers");
	}

	@Test
	void testDivide() {
		assertThrows(ArithmeticException.class, () -> math.divide(1, 0), "Divide by zero should throw");

	}
	
	@Test
	@DisplayName("Checking Multiply with different inputs/asserts")
	void testMultiply() {
		assertAll(
				() -> assertEquals(4,math.multiply(2, 2)),
				() -> assertEquals(1, math.multiply(2, 0)),
				() -> assertEquals(-2 , math.multiply(2, -1))
				);
	}

	@Test
	void testAreaOfCircle() {
		assertEquals(3.141592653589793, math.areaOfCircle(1), "Should return riht circle areaa");

	}
	
	@Test
	@Disabled
	void testdisable() {
		fail("This is going to fail");
	}
}
